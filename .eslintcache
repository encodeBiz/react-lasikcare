[{"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/index.js":"1","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/clinics/clinics.reducer.js":"2","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/appointment_config/appointmentConfig.reducer.js":"3","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/available_online_hours/available_online_hours.reducer.js":"4","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/appointment_config/appointmentConfig.actions.js":"5","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/loading/loading.actions.js":"6","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Card/Card.js":"7","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/hooks/useWindowSize.js":"8","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/InputBlock/InputBlock.js":"9","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/CityAppointmentPage/CityAppointmentPage.js":"10","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/video_call/CalendarOnlinePage/CalendarOnlinePage.js":"11","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/timer/timer.reducer.js":"12","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/clinics/clinics.actions.js":"13","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Stepper/Stepper.js":"14","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Calendar/CalendarHour/CalendarHour.js":"15","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/CalendarAppointmentPage/CalendarAppointmentPage.js":"16","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/router/RootComponent.js":"17","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/available_hours/available_hours.actions.js":"18","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/TypeAppointmentPage/TypeAppointmentPage.js":"19","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/errors/errors.reducer.js":"20","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/available_online_hours/available_online_hours.actions.js":"21","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Loading/Loading.js":"22","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/timer/timer.actions.js":"23","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Calendar/Calendar.js":"24","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/services/appointments.service.js":"25"},{"size":602,"mtime":1634222864749,"results":"26","hashOfConfig":"27"},{"size":605,"mtime":1634222864748,"results":"28","hashOfConfig":"27"},{"size":1185,"mtime":1634222864745,"results":"29","hashOfConfig":"27"},{"size":729,"mtime":1634222864747,"results":"30","hashOfConfig":"27"},{"size":2892,"mtime":1634222864745,"results":"31","hashOfConfig":"27"},{"size":328,"mtime":1634222864749,"results":"32","hashOfConfig":"27"},{"size":373,"mtime":1634222864761,"results":"33","hashOfConfig":"27"},{"size":1033,"mtime":1634222864723,"results":"34","hashOfConfig":"27"},{"size":1253,"mtime":1634222864767,"results":"35","hashOfConfig":"27"},{"size":12665,"mtime":1634282017979,"results":"36","hashOfConfig":"27"},{"size":18202,"mtime":1634294381583,"results":"37","hashOfConfig":"27"},{"size":332,"mtime":1634222864752,"results":"38","hashOfConfig":"27"},{"size":682,"mtime":1634222864747,"results":"39","hashOfConfig":"27"},{"size":1162,"mtime":1634222864771,"results":"40","hashOfConfig":"27"},{"size":766,"mtime":1634222864759,"results":"41","hashOfConfig":"27"},{"size":18214,"mtime":1634295828173,"results":"42","hashOfConfig":"27"},{"size":3774,"mtime":1634281963731,"results":"43","hashOfConfig":"27"},{"size":2238,"mtime":1634290540652,"results":"44","hashOfConfig":"27"},{"size":4875,"mtime":1634283003666,"results":"45","hashOfConfig":"27"},{"size":656,"mtime":1634222864748,"results":"46","hashOfConfig":"27"},{"size":1551,"mtime":1634222864747,"results":"47","hashOfConfig":"27"},{"size":520,"mtime":1634222864768,"results":"48","hashOfConfig":"27"},{"size":160,"mtime":1634222864752,"results":"49","hashOfConfig":"27"},{"size":2720,"mtime":1634296544694,"results":"50","hashOfConfig":"27"},{"size":2652,"mtime":1634222864753,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"gmxv3u",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"57"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"57"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/index.js",[],["107","108"],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/clinics/clinics.reducer.js",[],["109","110"],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/appointment_config/appointmentConfig.reducer.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/available_online_hours/available_online_hours.reducer.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/appointment_config/appointmentConfig.actions.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/loading/loading.actions.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Card/Card.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/hooks/useWindowSize.js",[],["111","112"],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/InputBlock/InputBlock.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/CityAppointmentPage/CityAppointmentPage.js",["113","114","115","116","117"],"/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from \"react\";\n\n//Router\n\nimport { useHistory } from \"react-router\";\n\n// Redux\n\nimport { connect } from \"react-redux\";\nimport { updateAvailableHours } from \"../../../redux/available_hours/available_hours.actions\";\nimport { fetchClinics } from \"../../../redux/clinics/clinics.actions\";\nimport { setAppoinmentConfig } from \"../../../redux/appointment_config/appointmentConfig.actions\";\nimport { fetchOnlineAvailableHours } from \"../../../redux/available_online_hours/available_online_hours.actions\";\n\n// Componentes\n\nimport CardContainer from \"../../../shared_modules/CardContainer/CardContainer\";\nimport Card from \"../../../shared_modules/Card/Card\";\n\n// Assets\n\nimport madridIcon from \"../../../assets/images/icons/one.jpg\";\nimport albaceteIcon from \"../../../assets/images/icons/dos.jpg\";\nimport toledoIcon from \"../../../assets/images/icons/tres.jpg\";\n\n//Estilos\n\nimport \"./CityAppointmentPage.scss\";\nimport { setGlobalError } from \"../../../redux/errors/errors.actions\";\nimport moment from \"moment\";\nimport { setIsGlobalLoading, setOnlineGlobalLoading } from \"../../../redux/loading/loading.actions\";\nimport Loading from \"../../../shared_modules/Loading/Loading\";\nimport { IMAGES_SERVER } from \"../../../constants/constants\";\nimport { setIsTimerActive } from \"../../../redux/timer/timer.actions\";\n\nimport Stepper from \"../../../shared_modules/Stepper/Stepper\";\n\n/**\n * Seleccionde la ciudad, modifica el estado de configuracion de cita en el store\n * @param {Object} properties\n * @param {Promise} properties.clinics Clínicas disponibles\n */\nconst CityAppointmentPage = (properties) => {\n\tconst history = useHistory();\n\tconst [isLoading, setIsLoading] = useState(true);\n\n\tconst currentMonthNum = moment().format(\"M\");\n\tconst currentMonth = moment().format(\"DD/MM/YYYY\");\n\n\tconst nextMonthNum = moment().set('date', 1).add(1, \"month\").format(\"M\");\n\tconst nextMonth = moment().set('date', 1).add(1, \"month\").format(\"DD/MM/YYYY\");\n\n\tconst nextSecondMonthNum = moment().set('date', 1).add(2, \"month\").format(\"M\");\n\tconst nextSecondMonth = moment().set('date', 1).add(2, \"month\").format(\"DD/MM/YYYY\");\n\n\tconst cities = [\n\t\t{\n\t\t\tname: \"München\",\n\t\t\taddress: \"SOME_ADDRESS1\",\n\t\t\tkeycli: \"GR021\",\n\t\t\ticon: madridIcon,\n\t\t},\n\t\t{\n\t\t\tname: \"Augsburg\",\n\t\t\taddress: \"SOME_ADDRESS2\",\n\t\t\tkeycli: \"GR022\",\n\t\t\ticon: albaceteIcon,\n\t\t},\n\t\t{\n\t\t\tname: \"Rosenheim\",\n\t\t\taddress: \"SOME_ADDRESS2\",\n\t\t\tkeycli: \"GR023\",\n\t\t\ticon: toledoIcon,\n\t\t},\n\t];\n\n\t///////////////////////////////////////////\n\t// LLAMADAS A APIS\n\t///////////////////////////////////////////\n\n\tuseEffect(() => {\n\t\tproperties.setAppoinmentConfig(\"currentStep\", 0);\n\t}, []);\n\n\t/**\n\t * ***************************************************************\n\t * LISTA DE CLINICAS\n\t * ***************************************************************\n\t */\n\n\t/**\n\t * Se ejecuta la función que se encarga de conseguir las clínicas\n\t */\n\n\tuseEffect(() => {\n\t\tif (properties.clinics.status !== \"finish\") {\n\t\t\tgetClinics();\n\t\t} else {\n\t\t\tsetIsLoading(false);\n\t\t}\n\t\t// eslint-disable-next-line\n\t},[]);\n\n\t/**\n\t *  Se gestiona la llamada para conseguir la lista de clínicas\n\t * \tCuando se termina la llamada se setea el loading a false\n\t */\n\n\tconst getClinics = async () => {\n\t\ttry {\n\t\t\tawait properties.fetchClinics();\n\t\t\tsetIsLoading(false);\n\t\t} catch (error) {\n\t\t\tsetIsLoading(false);\n\t\t\tproperties.setGlobalError(error);\n\t\t}\n\t};\n\n\t/**\n\t * ***************************************************************\n\t * HORAS LIBRES\n\t * ***************************************************************\n\t */\n\n\t/**\n\t * Setea el currentStep del store y\n\t * si existe el array cities en el local storage hace una llamada a la\n\t * API para conseguir los datos de cada ciudad\n\t */\n\n\tuseEffect(() => {\n\t\tif (properties.timer.isTimerActive) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (properties.clinics.clinics?.length > 0) {\n\t\t\t// La llamada al timer tiene que hacerse aquí después de que\n\t\t\t// la llamada a getClinics modifique el Loading del que\n\t\t\t// depende este useEffect\n\n\t\t\tstartTimer();\n\t\t\t//Descomentar si queremos habilitar las llamadas de cacheo\n\t\t\t/* const cities = JSON.parse(localStorage.getItem(\"tempCities\"));\n\t\t\t\n\t\t\tif (cities) {\n\t\t\t\tgetClinicsHours(cities);\n\t\t\t} */\n\n\t\t\tproperties.setAppoinmentConfig(\"currentStep\", 0);\n\t\t}\n\t\tif (isLoading) {\n\t\t\t//Esto es para habilitar la llamada a las en cahce de videochat\n\t\t\tgetAllOnlineHours();\n\t\t}\n\n\t\t// eslint-disable-next-line\n\t}, [isLoading]);\n\n\t/**\n\t * Activa el timer que impide que se realicen\n\t * varias llamadas consecutivas\n\t * en menos de un minuto\n\t */\n\n\tconst startTimer = () => {\n\t\tproperties.setIsTimerActive(true);\n\n\t\tsetTimeout(() => {\n\t\t\tproperties.setIsTimerActive(false);\n\t\t}, 30000);\n\t};\n\n\t/**\n\t * @param {Object} selectedCities\n\t * Por cada uno de las clínicas se hace una llamada para conseguir\n\t * los huecos tanto en \"BI\" (gratis) como en \"BIDI\" (de pago)\n\t *\n\t * IMPORTANTE!!\n\t *\n\t * Únicamente se harán las llamadas de las ciudades existentes en el localStorage\n\t */\n\n\tconst getClinicsHours = async (selectedCities) => {\n\t\tproperties.setIsGlobalLoading(true);\n\t\tlet firstMonthPromises = [];\n\t\tlet secondPromises = [];\n\t\ttry {\n\t\t\tselectedCities.forEach((clinic) => {\n\t\t\t\tfirstMonthPromises.push(\n\t\t\t\t\tproperties.updateAvailableHours(clinic.keycli, \"BI\", currentMonth, currentMonthNum),\n\t\t\t\t\tproperties.updateAvailableHours(clinic.keycli, \"BIDI\", currentMonth, currentMonthNum)\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tselectedCities.forEach((clinic) => {\n\t\t\t\tsecondPromises.push(\n\t\t\t\t\t//Pedir los sigientes meses\n\t\t\t\t\t/*\n\t\t\t\t\tproperties.updateAvailableHours(clinic.keycli, \"BI\", nextMonth, nextMonthNum),\n\t\t\t\t\tproperties.updateAvailableHours(clinic.keycli, \"BIDI\", nextMonth, nextMonthNum),\n\t\t\t\t \tproperties.updateAvailableHours(clinic.keycli, \"BI\", nextSecondMonth, nextSecondMonthNum),\n\t\t\t\t\tproperties.updateAvailableHours(\n\t\t\t\t\t\tclinic.keycli,\n\t\t\t\t\t\t\"BIDI\",\n\t\t\t\t\t\tnextSecondMonth,\n\t\t\t\t\t\tnextSecondMonthNum\n\t\t\t\t\t)*/\n\t\t\t\t);\n\t\t\t});\n\t\t\t\n\t\t\tawait Promise.all(firstMonthPromises.concat(secondPromises));\n\t\t\tproperties.setIsGlobalLoading(false);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\t/**\n\t * Hace una llamada a Redux para que consiga las fechas disponibles para las videollamadas\n\t * Se hace una llamada por el mes presente y el siguiente para que estén disponibles\n\t * @returns {{huecos: {Array.<keymed:String,fecha:String,horaRealCita:Number,horaInicio:Number,horaFin:Number>}, errores:{cod:Number,mensaje:Object}} }}\n\t */\n\n\tconst getAllOnlineHours = async () => {\n\t\tproperties.setOnlineGlobalLoading(true);\n\t\ttry {\n\t\t\tawait properties.fetchOnlineAvailableHours(currentMonth);\n\t\t\t/* await properties.fetchOnlineAvailableHours(nextMonth);\n\t\t\tawait properties.fetchOnlineAvailableHours(nextSecondMonth);\n */\n\t\t\tproperties.setOnlineGlobalLoading(false);\n\t\t} catch (error) {\n\t\t\tproperties.setOnlineGlobalLoading(false);\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\t//////////////////////////////////////////\n\t// GESTIÓN DE ESTADO Y STORAGE\n\t///////////////////////////////////////////\n\n\t/**\n\t *\n\t * @param {String} keycli\n\t * @param {String} name\n\t * @param {String} address\n\t * @see setCityInStorage\n\t *\n\t * El usuario selecciona la ciudad en la que quiere la consulta,\n\t * Se le redirige a la vista de selección de tipo de cita\n\t * Si hay ciudades en el local storage se realiza una llamada para conseguir los huecos\n\t * de las ciudades del local storage y de la selección del usuario.\n\t * Si no, se limita a hacer una llamada por la ciudad seleccionada.\n\t *\n\t */\n\tconst handleCitySelect = ({ keycli, clinica, address }) => {\n\t\tif(!clinica) clinica = 'münich';\n\t\twindow.dataLayer.push({\n\t\t\tevent: 'gaEvent',\n\t\t\tgaEventCategory: 'online booking',\n\t\t\tgaEventAction: 'step 1',\n\t\t\tgaEventLabel: 'standort',\n\t\t\tgaEventValue: undefined,\n\t\t\tgaEventNonInt: 0,\n\t\t\tdimension1: clinica.toLowerCase() // Clicked City name in lowercase\n\t\t});\n\t\t\n\t\t\n\t\tif (keycli) {\n\t\t\t// Setea la ciudad en el local storage\n\t\t\t//const cities = JSON.parse(localStorage.getItem(\"tempCities\"));\n\t\t\t//let isCachedCity = false;\n\t\t\t//Descomentar si queremos habilitar las llamadas de cacheo\n\t\t\t/* if(cities){\n\t\t\t\tisCachedCity  = cities.find(city => city.keycli === keycli)\n\t\t\t} */\n\n\t\t\t//setCityInStorage({ keycli, clinica, address }); \n\n\t\t\t// Setea la ciudad en redux\n\n\t\t\tproperties.setAppoinmentConfig(\"city\", { keycli, clinica, address });\n\n\t\t\t// Redirige hacia el siguiente paso\n\n\t\t\thistory.push(\"/termintyp\");\n\n\t\t\t// Hace la llamada a la API\n\t\t\t//Descomentar si queremos habilitar las llamadas de cacheo\n\t\t\t/* if(!isCachedCity || !properties.timer.isTimerActive){\n\t\t\t\tgetClinicsHours([{ keycli, name: clinica }]);\n\t\t\t} */\n\t\t\tgetClinicsHours([{ keycli, name: clinica }]);\n\t\t}\n\t};\n\n\t/**\n\t *\n\t * @param {Object} newCity\n\t * @property {String} keycli\n\t * @property {String} name\n\t * @property {String} address\n\t * @see handleCitySelect\n\t *\n\t * Pushea la nueva ciudad si no existe en el array del local storage.\n\t * Si exite hace un early return\n\t *\n\t *\n\t */\n\n\tconst setCityInStorage = (newCity) => {\n\t\tconst citiesInStorage = JSON.parse(localStorage.getItem(\"tempCities\")) || [];\n\t\tconst doesCityExist = citiesInStorage.some((city) => city.keycli === newCity.keycli);\n\t\tif (!doesCityExist) {\n\t\t\tcitiesInStorage.push(newCity);\n\t\t\tlocalStorage.setItem(\"tempCities\", JSON.stringify(citiesInStorage));\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t};\n\n\tconst navigateTo = (url) => history.push(url);\n\n\t//////////////////////////////////////////\n\t// RENDERIZADO\n\t///////////////////////////////////////////\n\n\treturn (\n\t\t<>\n\t\t\t<Stepper currentStepIndex={properties.appointment?.currentStep} navigateTo={navigateTo} />\n\t\t\t<div className=\"wrapper-general\">\n\t\t\t\t<div className=\"title-seccion\">\n\t\t\t\t\t<h1>Bitte Standort wählen</h1>\n\t\t\t\t</div>\n\t\t\t\t<span onClick={() => history.push(\"/termin-bereits-vergeben\")} className=\"sorry-link\">\n\t\t\t\t\tTo sorry page\n\t\t\t\t</span>\n\n\t\t\t\t<div className=\"city-appointment-container\">\n\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t<CardContainer>\n\t\t\t\t\t\t\t<div className=\"loading-center\">\n\t\t\t\t\t\t\t\t<Loading />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</CardContainer>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<CardContainer isColumn={true}>\n\t\t\t\t\t\t\t{properties.clinics.clinics?.length > 0 &&\n\t\t\t\t\t\t\t\tproperties.clinics.clinics.map((city, index) => {\n\t\t\t\t\t\t\t\t\tconst cityIcon = cities.find(\n\t\t\t\t\t\t\t\t\t\t(cityWithIcon) => cityWithIcon.keycli === city.keycli\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Card key={index} handleClick={handleCitySelect} clickParam={city}>\n\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\tsrc={\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.env.NODE_ENV === \"development\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? cityIcon?.icon\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: IMAGES_SERVER + cityIcon?.icon\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\talt={cityIcon?.icon}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"type-image-city\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<p>{city.clinica}</p>\n\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</CardContainer>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\n//////////////////////////////////////////\n// REDUX\n//////////////////////////////////////////\n\nconst mapDispatchToProps = (dispatch) => ({\n\t/**\n\t *\n\t * @param {String} property  Propiedad del estado que se debe actualizar\n\t * @param {String || Object || number} data Datos con los que se actualizará la propiedad anterior\n\t * @description Actualiza un campo del objeto de appointment\n\t */\n\tsetAppoinmentConfig: (property, data) => dispatch(setAppoinmentConfig(property, data)),\n\n\t/**\n\t *\n\t * @param {String} date Día presente en formato dd/mm/yyyy\n\t * @returns\n\t */\n\n\tfetchOnlineAvailableHours: (date) => dispatch(fetchOnlineAvailableHours(date)),\n\n\t/**\n\t *\n\t * @param {String} keycli\n\t * @param {String} type\n\t * @param {String} date\n\t * @param {String} nextMonth\n\t * @returns\n\t */\n\n\tupdateAvailableHours: (keycli, type, date, nextMonth) =>\n\t\tdispatch(updateAvailableHours(keycli, type, date, nextMonth)),\n\n\t/**\n\t * @description Devuelve una lista de clínicas\n\t */\n\n\tfetchClinics: () => dispatch(fetchClinics()),\n\n\t/**\n\t *\n\t * @param {String} error\n\t *\n\t * Setea un nuevo error en Redux\n\t */\n\n\tsetGlobalError: (error) => dispatch(setGlobalError(error)),\n\n\t/**\n\t *\n\t * @param {boolean} value\n\t * @returns\n\t */\n\n\tsetIsGlobalLoading: (value) => dispatch(setIsGlobalLoading(value)),\n\n\t/**\n\t *\n\t * @param {boolean} onlineValue\n\t * @returns\n\t */\n\n\tsetOnlineGlobalLoading: (onlineValue) => dispatch(setOnlineGlobalLoading(onlineValue)),\n\n\tsetIsTimerActive: (value) => dispatch(setIsTimerActive(value)),\n});\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tclinics: state.clinics,\n\t\tappointment: state.appointment,\n\t\tavailable_hours: state.available_hours,\n\t\tonline_available_hours: state.online_available_hours,\n\t\tloading: state.loading,\n\t\ttimer: state.isTimerActive,\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CityAppointmentPage);\n","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/video_call/CalendarOnlinePage/CalendarOnlinePage.js",["118"],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/timer/timer.reducer.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/clinics/clinics.actions.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Stepper/Stepper.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Calendar/CalendarHour/CalendarHour.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/CalendarAppointmentPage/CalendarAppointmentPage.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/router/RootComponent.js",["119"],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/available_hours/available_hours.actions.js",["120","121"],"import { getHuecos } from \"../../services/appointments.service\";\nimport moment from \"moment\";\nimport { setGlobalError } from \"../errors/errors.actions\";\n\nexport const SET_HOURS = \"SET_HOURS\";\nexport const GET_HOURS = \"get_hours\";\nexport const UPDATE_HOURS = \"UPDATE_HOURS\";\n\nexport const getHoursById = (keycli, appointments_type, data, month) => ({\n\ttype: SET_HOURS,\n\tclinic_data: { keycli: keycli, appointments_type: appointments_type },\n\tmonth,\n\tdata,\n});\n\nexport const getHours = ({ keycli, appointments_type }) => ({\n\ttype: GET_HOURS,\n\tclinic_data: { appointments_type: appointments_type },\n});\n\nexport const updateHours = (keycli, appointments_type, data, nextMonth) => ({\n\ttype: UPDATE_HOURS,\n\tclinic_data: { keycli: keycli, appointments_type: appointments_type },\n\tdata,\n\tnextMonth,\n});\n/**\n *\n * @param {String} keycli\n * @param {String} date Si se pasa como argumento será como un String (\"DD/MM/YYYY\")\n * @param {String} type\n *\n * Action creator para pasar el resultado de la petición al reducer.\n *\n */\n\nexport const fetchAvailableHours = (keycli, type, date) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tlet dateToSend = \"\";\n\n\t\t\tif (date) {\n\t\t\t\tdateToSend = date;\n\t\t\t} else {\n\t\t\t\tdateToSend = moment().format(\"DD/MM/YYYY\");\n\t\t\t}\n\n\t\t\tconst res = await Promise.all([getHuecos({ keycli, date: dateToSend, type })]);\n\n\t\t\tconst month = moment(dateToSend, \"DD/MM/YYYY\").format(\"M\");\n\n\t\t\tconst data = res[0].huecos ? { [keycli]: { [type]: res[0].huecos } } : {};\n\n\t\t\t// return dispatch(getHoursById(keycli, type, data, month));\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n};\n\nexport const updateAvailableHours = (keycli, type, date, nextMonth) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tconst res = await getHuecos({ keycli, date, type });\n\t\t\n\t\t\tif (Number(res?.errores?.cod) !== 0) {\n\t\t\t\treturn dispatch(setGlobalError(Number(res?.errores?.cod)));\n\t\t\t}\n\t\t\tlet data;\n\t\t\t\n\t\t\tif(res.huecos.hueco){\n\t\t\t\tconst huecos = Array.isArray(res.huecos.hueco) ? res.huecos : {hueco : [res.huecos.hueco]}\n\t\t\t\tdata = { [keycli]: { [type]: huecos } };\n\t\t\t}else{\n\t\t\t\tdata = { [keycli]: { [type]: {hueco: []} } }\n\t\t\t}\n\t\t\treturn dispatch(updateHours(keycli, type, data, nextMonth));\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n};\n","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/TypeAppointmentPage/TypeAppointmentPage.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/errors/errors.reducer.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/available_online_hours/available_online_hours.actions.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Loading/Loading.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/timer/timer.actions.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Calendar/Calendar.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/services/appointments.service.js",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"122","replacedBy":"126"},{"ruleId":"124","replacedBy":"127"},{"ruleId":"122","replacedBy":"128"},{"ruleId":"124","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":51,"column":8,"nodeType":"132","messageId":"133","endLine":51,"endColumn":20},{"ruleId":"130","severity":1,"message":"134","line":52,"column":8,"nodeType":"132","messageId":"133","endLine":52,"endColumn":17},{"ruleId":"130","severity":1,"message":"135","line":54,"column":8,"nodeType":"132","messageId":"133","endLine":54,"endColumn":26},{"ruleId":"130","severity":1,"message":"136","line":55,"column":8,"nodeType":"132","messageId":"133","endLine":55,"endColumn":23},{"ruleId":"130","severity":1,"message":"137","line":312,"column":8,"nodeType":"132","messageId":"133","endLine":312,"endColumn":24},{"ruleId":"130","severity":1,"message":"138","line":36,"column":10,"nodeType":"132","messageId":"133","endLine":36,"endColumn":27},{"ruleId":"139","severity":1,"message":"140","line":100,"column":6,"nodeType":"141","endLine":100,"endColumn":8,"suggestions":"142"},{"ruleId":"130","severity":1,"message":"143","line":50,"column":10,"nodeType":"132","messageId":"133","endLine":50,"endColumn":15},{"ruleId":"130","severity":1,"message":"144","line":52,"column":10,"nodeType":"132","messageId":"133","endLine":52,"endColumn":14},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],["145"],["146"],["145"],["146"],"no-unused-vars","'nextMonthNum' is assigned a value but never used.","Identifier","unusedVar","'nextMonth' is assigned a value but never used.","'nextSecondMonthNum' is assigned a value but never used.","'nextSecondMonth' is assigned a value but never used.","'setCityInStorage' is assigned a value but never used.","'isInitialMonthSet' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["147"],"'month' is assigned a value but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},"Update the dependencies array to be: [history]",{"range":"150","text":"151"},[2790,2792],"[history]"]