[{"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/index.js":"1","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/clinics/clinics.reducer.js":"2","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/appointment_config/appointmentConfig.reducer.js":"3","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/available_online_hours/available_online_hours.reducer.js":"4","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/appointment_config/appointmentConfig.actions.js":"5","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/loading/loading.actions.js":"6","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Card/Card.js":"7","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/hooks/useWindowSize.js":"8","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/InputBlock/InputBlock.js":"9","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/CityAppointmentPage/CityAppointmentPage.js":"10","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/video_call/CalendarOnlinePage/CalendarOnlinePage.js":"11","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/timer/timer.reducer.js":"12","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/clinics/clinics.actions.js":"13","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Stepper/Stepper.js":"14","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Calendar/CalendarHour/CalendarHour.js":"15","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/CalendarAppointmentPage/CalendarAppointmentPage.js":"16","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/router/RootComponent.js":"17","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/available_hours/available_hours.actions.js":"18","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/TypeAppointmentPage/TypeAppointmentPage.js":"19","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/errors/errors.reducer.js":"20","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/available_online_hours/available_online_hours.actions.js":"21","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Loading/Loading.js":"22","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/timer/timer.actions.js":"23","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Calendar/Calendar.js":"24","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/services/appointments.service.js":"25","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/available_hours/available_hours.reducer.js":"26","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/ErrorDialog/ErrorDialog.js":"27","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/ConfirmAppointmentPage/ConfirmForm/ConfirmForm.js":"28","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/ErrorToast/ErrorToast.js":"29","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/CardContainer/CardContainer.js":"30","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/ThankAppointmentPage/ThankAppointmentPage.js":"31","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/ConfirmAppointmentPage/ConfirmAppointmentPage.js":"32"},{"size":602,"mtime":1634222864749,"results":"33","hashOfConfig":"34"},{"size":605,"mtime":1634222864748,"results":"35","hashOfConfig":"34"},{"size":1185,"mtime":1634222864745,"results":"36","hashOfConfig":"34"},{"size":729,"mtime":1634222864747,"results":"37","hashOfConfig":"34"},{"size":2892,"mtime":1634222864745,"results":"38","hashOfConfig":"34"},{"size":328,"mtime":1634222864749,"results":"39","hashOfConfig":"34"},{"size":373,"mtime":1634222864761,"results":"40","hashOfConfig":"34"},{"size":1033,"mtime":1634222864723,"results":"41","hashOfConfig":"34"},{"size":1253,"mtime":1634222864767,"results":"42","hashOfConfig":"34"},{"size":12675,"mtime":1635248226983,"results":"43","hashOfConfig":"34"},{"size":18202,"mtime":1634294381583,"results":"44","hashOfConfig":"34"},{"size":332,"mtime":1634222864752,"results":"45","hashOfConfig":"34"},{"size":682,"mtime":1634222864747,"results":"46","hashOfConfig":"34"},{"size":1162,"mtime":1634222864771,"results":"47","hashOfConfig":"34"},{"size":766,"mtime":1634222864759,"results":"48","hashOfConfig":"34"},{"size":18720,"mtime":1635245919764,"results":"49","hashOfConfig":"34"},{"size":4024,"mtime":1635236010895,"results":"50","hashOfConfig":"34"},{"size":2238,"mtime":1634297488004,"results":"51","hashOfConfig":"34"},{"size":4875,"mtime":1634283003666,"results":"52","hashOfConfig":"34"},{"size":656,"mtime":1634222864748,"results":"53","hashOfConfig":"34"},{"size":1551,"mtime":1634222864747,"results":"54","hashOfConfig":"34"},{"size":520,"mtime":1634222864768,"results":"55","hashOfConfig":"34"},{"size":160,"mtime":1634222864752,"results":"56","hashOfConfig":"34"},{"size":2921,"mtime":1635245916685,"results":"57","hashOfConfig":"34"},{"size":2652,"mtime":1634222864753,"results":"58","hashOfConfig":"34"},{"size":1409,"mtime":1634222864747,"results":"59","hashOfConfig":"34"},{"size":548,"mtime":1634222864765,"results":"60","hashOfConfig":"34"},{"size":8325,"mtime":1635248903978,"results":"61","hashOfConfig":"34"},{"size":1353,"mtime":1634222864766,"results":"62","hashOfConfig":"34"},{"size":482,"mtime":1634222864762,"results":"63","hashOfConfig":"34"},{"size":6369,"mtime":1635254557456,"results":"64","hashOfConfig":"34"},{"size":7350,"mtime":1635254610939,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"gmxv3u",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/index.js",[],["136","137"],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/clinics/clinics.reducer.js",[],["138","139"],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/appointment_config/appointmentConfig.reducer.js",[],["140","141"],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/available_online_hours/available_online_hours.reducer.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/appointment_config/appointmentConfig.actions.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/loading/loading.actions.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Card/Card.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/hooks/useWindowSize.js",[],["142","143"],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/InputBlock/InputBlock.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/CityAppointmentPage/CityAppointmentPage.js",["144","145","146","147","148","149"],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/video_call/CalendarOnlinePage/CalendarOnlinePage.js",["150"],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/timer/timer.reducer.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/clinics/clinics.actions.js",[],["151","152"],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Stepper/Stepper.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Calendar/CalendarHour/CalendarHour.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/CalendarAppointmentPage/CalendarAppointmentPage.js",["153"],"/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Stepper from \"../../../shared_modules/Stepper/Stepper\";\nimport Calendar from \"../../../shared_modules/Calendar/Calendar\";\n\nimport \"./CalendarAppointmentPage.scss\";\nimport Button from \"../../../shared_modules/Button/Button\";\nimport { useHistory } from \"react-router\";\nimport { setAppoinmentConfig } from \"../../../redux/appointment_config/appointmentConfig.actions\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport useWindowSize from \"../../../hooks/useWindowSize\";\nimport CardContainer from \"../../../shared_modules/CardContainer/CardContainer\";\nimport { updateAvailableHours } from \"../../../redux/available_hours/available_hours.actions\";\nimport Card from \"../../../shared_modules/Card/Card\";\nimport opcionOne from \"../../../assets/images/icons/type-free.svg\";\nimport opcionTwo from \"../../../assets/images/icons/calendar-icon.svg\";\nimport Loading from \"../../../shared_modules/Loading/Loading\";\nimport { IMAGES_SERVER } from \"../../../constants/constants\";\nimport { sendErrorEmail } from \"../../../services/email.service\";\nimport { setIsGlobalLoading } from \"../../../redux/loading/loading.actions\";\nimport { date } from \"yup\";\n\n/**\n *\n * @param {Object} properties\n * @param {Object} properties.appointment Configuración de la cita hasta el momento desde redux\n * @param {Object} properties.available_hours Horas disponibles por tipo y ciudad desde redux\n *\n * Pagina de calendario y selección de hora\n */\n\nconst CalendarAppointmentPage = (properties) => {\n  const history = useHistory();\n  const navigateTo = (url) => history.push(url);\n  const today = moment(Date.now());\n  const { available_hours, appointment } = properties;\n\n  const buttonRef = useRef(null);\n\n  const buttonsConfig = [\n    {\n      action: \"Ärztliche Voruntersuchung (ca. 40 €) - Termin vor Ort\",\n      text: \"Ärztliche Voruntersuchung (ca. 40 €) - Termin vor Ort\",\n      // label: \"40€\",\n      type: \"BIDI\",\n      img: opcionTwo,\n      url: \"/termintyp/vor-ort/voruntersuchung\",\n    },\n    {\n      action: \"Unverbindliches Informationsgespräch\",\n      text: \"Unverbindliches Informationsgespräch\",\n      label: \"\",\n      type: \"BI\",\n      img: opcionOne,\n      url: \"/termintyp/vor-ort/informationsgespräch\",\n    },\n  ];\n\n  /////////////////////////////\n  // Configuración del componente\n  /////////////////////////////\n\n  const [calendarWidth, setCalendarWidth] = useState(null);\n  // eslint-disable-next-line\n  const [focused, setFocused] = useState(false);\n  const [initialDate] = useState(today);\n  const { width } = useWindowSize();\n  const [selectedType, setType] = useState(null);\n  const [selectedCity, setCity] = useState(null);\n  const [dataCalendar, setDataCalendar] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [activeIndex, setActiveIndex] = useState(null);\n  const [initialMonth, setInitialMonth] = useState(0);\n  const hasSentEmail = JSON.parse(localStorage.getItem(\"hasSentEmail\"));\n  const [isInitialMonthSet, setIsInitialMonthSet] = useState(false);\n   \n  const [disable_next, setDisable_next] = useState(false);\n  const [disable_prev, setDisable_prev] = useState(true);\n\n  const currentMonthNumber = moment(today, \"DD/MM/YYYY\").format(\"M\");\n\n  const [currentMonth, setCurrentMonth] = useState(currentMonthNumber);\n\n  useEffect(() => undefined, [loading]);\n\n  /**\n   * Seteo del current step y de la ciudad y el tipo de consulta seleccionada\n   */\n\n  useEffect(() => {\n    properties.setAppoinmentConfig(\"currentStep\", 2);\n    setType(properties.appointment.type);\n    setCity(properties.appointment.city.keycli);\n    // eslint-disable-next-line\n  }, [selectedType]);\n\n  /**\n   * @description Setea el currentStep del store\n   * @see filterData\n   */\n  useEffect(() => {\n    // Selecciona del store los datos correspondientes al mes que se muestra en el calendario\n\t\n    const data =\n      selectedCity && selectedType\n        ? properties.available_hours[selectedCity]?.data[selectedType]?.[\n            currentMonth\n          ]\n        : [];\n\t\n    if (data && data.length > 0) {\n      const filteredData = filterData(data);\n      // Si filtered data tiene menos de 5 citas disponibles,\n      // es BIDI y no se ha enviado un email antes\n      // se envía un email a marketing@care-vision.com\n      if (\n        appointment.type === \"BIDI\" &&\n        filteredData.length <= 5 &&\n        !hasSentEmail?.[currentMonth]\n      ) {\n        handleSendErrorEmail();\n      }\n\n      // Se setea el objeto de datos\n      setDataCalendar(filteredData);\n    } else {\n\t\t\tsetDataCalendar([]);\n      if (appointment.type === \"BIDI\" && !hasSentEmail?.[currentMonth]) {\n        handleSendErrorEmail();\n      }\n    }\n    // eslint-disable-next-line\n  }, [\n    selectedType,\n    selectedCity,\n    currentMonth,\n    properties.loading.globalLoading,\n  ]);\n\n  /**\n   * @description Setea la anchura del calendario\n   * para adaptarlo a diferentes tamaños de pantalla.\n   */\n\n  useEffect(() => {\n    setCalendarWidth(formatCalendarWidth(width));\n  }, [width]);\n\n  /**\n   * Se ejecuta cuando las peticiones al servidor ya han terminado\n   */\n\n  useEffect(() => {\n    if (!properties.loading.globalLoading && available_hours) {\n      getInitialMonth(\n        available_hours?.[appointment.city.keycli]?.data?.[appointment.type]\n      );\n    }\n  }, [\n    properties.loading.globalLoading,\n    properties.appointment.type,\n    available_hours,\n  ]);\n\n  /**\n   * Se ejecuta cuando se ha de cambiar de mes\n   */\n\n  useEffect(() => {\n    const month = Number(currentMonth) + initialMonth;\n\n    setCurrentMonth(month.toString());\n    const data =\n      available_hours?.[appointment.city.keycli]?.data?.[appointment.type]?.[\n        month.toString()\n      ];\n\n    // Se formatean las horas seleccioonadas\n\n    const filteredData = filterData(data);\n\n    // Se setean los datos formateados como nuevos datos que el calendario debera pintar\n    setDataCalendar(filteredData);\n\n    // Para que no se pinten horas que no corresponden a ninguna de las fechas seleccionadas se limpia el estado de fecha seleccionada\n\n    setSelectedDate(null);\n  }, [initialMonth]);\n\n  /**\n   *\n   */\n  const handleSendErrorEmail = async () => {\n    const utm_source = window.utm_source || \"\";\n    const tmr = \"\";\n\n    const query_params = {\n      clinic_id:\n        appointment.type === \"VIDEO\" ? \"GRLCV\" : appointment.city.keycli,\n      clinic_name: appointment.city.clinica,\n      clinic_address: appointment.city.address,\n      date: \"\",\n      hour: \"\",\n      horaFin: \"\",\n      keymed: \"\",\n      gender: \"\",\n      first_name: \"\",\n      last_name: \"\",\n      email: \"\",\n      phone: \"\",\n      message: \"\",\n      type: appointment.type,\n      utm_source,\n      tmr, //Se incluirá al final\n      comentarios: appointment.clientData.message,\n      sexo: appointment.clientData.gender,\n      error: `There are less than 5 available dates in ${appointment.city.clinica}`,\n    };\n    const data = {\n      ...hasSentEmail,\n      [currentMonth]: true,\n    };\n    localStorage.setItem(\"hasSentEmail\", JSON.stringify({ ...data }));\n    await sendErrorEmail(query_params);\n  };\n\n  /**\n   * Hace un loop sobre una lista de meses y\n   * si el mes está vacío pasa al siguiente\n   * hasta que se encuentre uno que no lo está\n   * @param {Object} monthObject Objeto con los meses guardados en el store\n   * @returns {string} retorna el numero del mes en formato string\n   */\n\n  const getInitialMonth = (appointmentObject) => {\n    let addToMonth = 0;\n    const months = Object.values(appointmentObject);\n\n    // Si no hay ninguna fecha en los próximos meses se debe de retornar\n\n    if (months.every((month) => month === undefined || month.length <= 0)) {\n      setInitialMonth(addToMonth);\n      return setIsInitialMonthSet(true);\n    }\n\n    // De lo contrario se suma 1 por cada mes consecutivo sin fechas disponibles.\n\n    for (let i = 0; i < months.length; i++) {\n      if (!months[i] === undefined || months[i].length <= 0) {\n        addToMonth++;\n      } else {\n        setInitialMonth(addToMonth);\n        return setIsInitialMonthSet(true);\n      }\n    }\n  };\n\n  /**\n   *\n   * @param {Number} width\n   * Formatea la anchura del calendario para ajustarla a la anchura de la ventana\n   */\n  const formatCalendarWidth = (width) => {\n    //a partir de 1080 no debe ejecutarse la función\n    if (width <= 360) return 35;\n    else if (width <= 414 || width <= 1080) return 40;\n    else if (width <= 980) return 50;\n    else return 50;\n  };\n\n  /////////////////////////////\n  // Gestión de eventos\n  /////////////////////////////\n\n  /**\n   *\n   * @param {Object} date fecha de moment\n   *\n   */\n\n  const handleDateChange = (date) => {\n    // Se setea a null para evitar que salga una hora por defecto\n    window.dataLayer.push({\n      event: \"gaEvent\",\n      gaEventCategory: \"online booking\",\n      gaEventAction: \"step 3\",\n      gaEventLabel: \"datum selected\",\n      gaEventValue: undefined,\n      gaEventNonInt: 0,\n      dimension1: undefined,\n    });\n\n    if (activeIndex !== null) {\n      setActiveIndex(null);\n      properties.setAppoinmentConfig(\"calendar_hour\", null);\n    }\n\n    const finded = dataCalendar?.filter((item) => {\n      return (\n        item.formattedDate.format(\"DD-MM-yyyy\") === date.format(\"DD-MM-yyyy\")\n      );\n    });\n\n    setSelectedDate(finded);\n    properties.setAppoinmentConfig(\"calendar_date\", date);\n  };\n\n  /**\n   *\n   * @param {Date} currentDate\n   * Cuando se pulsa en el botón de siguiente mes del calendario se hace una\n   * llamada para conseguir los huecos del mes siguiente\n   *\n   */\n  \n  const onNextMonthClick = async (currentDate) => {\n    try {\n      // // Setea currentMonth al mes actual\n\n      const month = moment(today, \"DD/MM/YYYY\").format(\"M\");\n\n      setCurrentMonth(month);\n\n      // Si está cargando todavía retornar\n\n      if (properties.loading.globalLoading) {\n        return;\n      }\n\n      // Se setea la fecha seleccionada a null para que desaparezcan las horas seleccionadas\n\n      setSelectedDate(null);\n\n      // Setea la fecha del que se pasará al action. Se añade un mes exacto\n      const momentDate = moment(currentDate).set('date', 1)\n      const date = momentDate.format(\"DD/M/YYYY\");\n      // Setea el mes que se utilizará para ubicar los nuevos datos en su lugar en el state\n      // Como ya se tienen los 3 primeros meses incluyendo el presente se setea el siguiente\n      // mes a presente mes + 3\n      const next = moment(Date.now()).set('date',1).add(1, 'M')\n      setDisable_next(momentDate.isAfter(next)) \n      setDisable_prev(false) \n\n      const nextMonth = (Number(currentMonth) + 1).toString();\n\n      // Acción que llama a la API para conseguir los datos del mes siguiente\n\t\t\n\t\t\tconst isData = properties.available_hours[selectedCity]?.data[selectedType]?.[\n\t\t\t\tnextMonth\n\t\t\t]\n\t\t\tif(!isData){\n\t\t\t\tsetLoading(true);\n\t\t\t\tawait properties.updateAvailableHours(\n\t\t\t\t\tappointment.city.keycli,\n\t\t\t\t\tappointment.type,\n\t\t\t\t\tdate,\n\t\t\t\t\tnextMonth\n\t\t\t\t);\n\t\t\t\tsetLoading(false);\n\t\t\t}\n      // Se suma uno al mes actual\n      setCurrentMonth(nextMonth);\n      \n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /**\n   * Cuando se va al mes anterior se resta uno al currentMonth\n   */\n\n  const onPreviousMonthClick = (e) => {\n    setDisable_prev(e.isBefore(today)) \n    setDisable_next(false) \n\n    setSelectedDate(null);\n    setCurrentMonth((Number(currentMonth) - 1).toString());\n   \n  };\n\n  /**\n   *\n   * @param {Object} hour\n   * @param {Number} index\n   * Setea la hora seleccionada\n   *\n   */\n\n  const handleSelectedHour = (hour, index) => {\n    window.dataLayer.push({\n      event: \"gaEvent\",\n      gaEventCategory: \"online booking\",\n      gaEventAction: \"step 3\",\n      gaEventLabel: \"uhrzeit selected\",\n      gaEventValue: undefined,\n      gaEventNonInt: 0,\n      dimension1: undefined,\n    });\n\n    properties.setAppoinmentConfig(\"calendar_hour\", hour);\n    setActiveIndex(index);\n    handleScroll();\n  };\n\n  /**\n   *\n   * @param {Array.<{\n   * \t\tfecha: String,\n   * \t\thoraFin: String,\n   * \t\thoraInicio: String,\n   * \t\thoraRealCita: String,\n   * \t\tkeymed: String}>} data\n   *\n   *\n   * Formatea los datos provenientes del store para que puedan ser consumidos por el calendario\n   */\n\n  const filterData = (data) => {\n    if (data && data.length > 0) {\n      const filteredData = data.map((item) => {\n        const date = item.fecha.split(\"/\");\n        const formattedDate = new Date(\n          parseInt(date[2]),\n          parseInt(date[1]) - 1,\n          parseInt(date[0])\n        );\n        return { ...item, formattedDate: moment(formattedDate) };\n      });\n\n      return filteredData;\n    }\n  };\n\n  /**\n   * Una vez se ha seleccionado la fecha y la hora se activa esta función en el click del botón\n   */\n\n  const onConfirmHour = () =>\n    history.push(\"/termintyp/vor-ort/datum/kontaktdaten/\");\n\n  /**\n   *\n   * @param {String} type Tipo de cita seleccionado\n   */\n\n  const handleClick = async (type, url) => {\n    try {\n      if (properties.loading.globalLoading || appointment.type === type) {\n        return;\n      }\n\n      // Setea el tipo\n\n      setType(type);\n      setIsInitialMonthSet(false);\n\n      await properties.setAppoinmentConfig(\"type\", type);\n\n      if (type === \"VIDEO\") {\n        history.push(\"/termintyp/zu-hause/videoberatung\");\n        return;\n      }\n\n      history.push(url);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /**\n   * Scroll cuando se selecciona una nueva hora\n   */\n\n  const handleScroll = () => {\n    if (buttonRef) {\n      buttonRef.current.scrollIntoView(false, { behavior: \"smooth\" });\n    }\n  };\n\n  /////////////////////////////\n  // Renderizado del componente\n  /////////////////////////////\n  \n  return (\n    <React.Fragment>\n      <Stepper\n        currentStepIndex={properties.appointment?.currentStep}\n        navigateTo={navigateTo}\n      />\n      <div className=\"wrapper-general\">\n        <div className=\"top-content\">\n          <Button\n            action={() => history.push(\"/termintyp/vor-ort/\")}\n            styleType={\"back-button\"}\n            label={\"Zurück\"}\n          />\n        </div>\n        <div className=\"calendar-appointment-page\">\n          <h1>Datum wählen</h1>\n          <CardContainer isColumn={true}>\n            <div className=\"button-container\">\n              {buttonsConfig.map((button, index) => {\n                const customClass =\n                  appointment.type === button.type ? \"card-highlighted\" : \"\";\n                return (\n                  <Card\n                    key={index}\n                    customClass={`pointer ${customClass} ${\n                      properties.loading.globalLoading ? \"is-loading\" : \"\"\n                    }`}\n                    handleClick={() => handleClick(button.type, button.url)}\n                    // clickParam={button.type}\n                  >\n                    <label>\n                      <input\n                        checked={appointment.type === button.type}\n                        type=\"radio\"\n                        name=\"type\"\n                        value={button.type}\n                        onChange={() => {}}\n                      />\n                      <img\n                        src={\n                          process.env.NODE_ENV === \"development\"\n                            ? button.img\n                            : IMAGES_SERVER + button.img\n                        }\n                        alt=\"...\"\n                      ></img>\n                      {button.text} <strong>{button.label}</strong>\n                    </label>\n                  </Card>\n                );\n              })}\n            </div>\n          </CardContainer>\n          {properties.loading.globalLoading ? (\n            <CardContainer>\n              <div className=\"loading-center\">\n                <Loading />\n              </div>\n            </CardContainer>\n          ) : (\n            <CardContainer className=\"change-margin\">\n              \n              {isInitialMonthSet && (\n                <Calendar\n                  datesList={dataCalendar}\n                  initialMonth={initialMonth}\n                  setFocused={setFocused}\n                  initialDate={initialDate}\n                  loading={loading}\n                  width={width}\n                  calendarWidth={calendarWidth}\n                  handleDateChange={handleDateChange}\n                  handleSelectedHour={handleSelectedHour}\n                  selectedDate={selectedDate}\n                  onNextMonthClick={onNextMonthClick}\n                  onPreviousMonthClick={onPreviousMonthClick}\n                  disable_next={disable_next}\n                  disable_prev={disable_prev}\n                  activeIndex={activeIndex}\n                />\n              )}\n            </CardContainer>\n          )}\n          <div className=\"container-button\" ref={buttonRef}>\n            {appointment.calendar_date && appointment.calendar_hour ? (\n              <Button\n                type={\"rounded-button\"}\n                label={\"TERMIN WÄHLEN\"}\n                action={onConfirmHour}\n              />\n            ) : (\n              <div className=\"button-fake-height\"></div>\n            )}\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\n/**\n *\n * @param {Function} dispatch\n * @description Transforma las acciones de redux en props\n *\n */\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    /**\n     *\n     * @param {String} property  Propiedad del estado que se debe actualizar\n     * @param {String || Object || number} data Datos con los que se actualizará la propiedad anterior\n     * @description Actualiza un campo del objeto de appointment\n     */\n    setAppoinmentConfig: (property, data) =>\n      dispatch(setAppoinmentConfig(property, data)),\n\n    updateAvailableHours: (keycli, type, date, nextMonth) =>\n      dispatch(updateAvailableHours(keycli, type, date, nextMonth)),\n\n    setIsGlobalLoading: (value) => dispatch(setIsGlobalLoading(value)),\n  };\n};\n\n/**\n *\n * @param {Object} store\n * @param {Object} store.appointment Configuración de la cita hasta el momento desde redux\n * @param {Object} store.available_hours Horas disponibles por tipo y ciudad desde redux\n * @description Transforma el appointments reducer a props\n * que serán consumidas por el componente y sus hijos.\n */\n\nconst mapStateToProps = (store) => {\n  return {\n    appointment: store.appointment,\n    available_hours: store.available_hours,\n    loading: store.loading,\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CalendarAppointmentPage);\n","/Users/rload/Documents/LASICKCARE/react-lasikcare/src/router/RootComponent.js",["154"],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/available_hours/available_hours.actions.js",["155","156"],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/TypeAppointmentPage/TypeAppointmentPage.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/errors/errors.reducer.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/available_online_hours/available_online_hours.actions.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Loading/Loading.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/timer/timer.actions.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/Calendar/Calendar.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/services/appointments.service.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/redux/available_hours/available_hours.reducer.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/ErrorDialog/ErrorDialog.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/ConfirmAppointmentPage/ConfirmForm/ConfirmForm.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/ErrorToast/ErrorToast.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/shared_modules/CardContainer/CardContainer.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/ThankAppointmentPage/ThankAppointmentPage.js",[],"/Users/rload/Documents/LASICKCARE/react-lasikcare/src/page_modules/appointments/ConfirmAppointmentPage/ConfirmAppointmentPage.js",[],{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"157","replacedBy":"161"},{"ruleId":"159","replacedBy":"162"},{"ruleId":"157","replacedBy":"163"},{"ruleId":"159","replacedBy":"164"},{"ruleId":"157","replacedBy":"165"},{"ruleId":"159","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":51,"column":8,"nodeType":"169","messageId":"170","endLine":51,"endColumn":20},{"ruleId":"167","severity":1,"message":"171","line":52,"column":8,"nodeType":"169","messageId":"170","endLine":52,"endColumn":17},{"ruleId":"167","severity":1,"message":"172","line":54,"column":8,"nodeType":"169","messageId":"170","endLine":54,"endColumn":26},{"ruleId":"167","severity":1,"message":"173","line":55,"column":8,"nodeType":"169","messageId":"170","endLine":55,"endColumn":23},{"ruleId":"167","severity":1,"message":"174","line":166,"column":8,"nodeType":"169","messageId":"170","endLine":166,"endColumn":18},{"ruleId":"167","severity":1,"message":"175","line":312,"column":8,"nodeType":"169","messageId":"170","endLine":312,"endColumn":24},{"ruleId":"167","severity":1,"message":"176","line":36,"column":10,"nodeType":"169","messageId":"170","endLine":36,"endColumn":27},{"ruleId":"157","replacedBy":"177"},{"ruleId":"159","replacedBy":"178"},{"ruleId":"167","severity":1,"message":"179","line":22,"column":10,"nodeType":"169","messageId":"170","endLine":22,"endColumn":14},{"ruleId":"180","severity":1,"message":"181","line":109,"column":6,"nodeType":"182","endLine":109,"endColumn":8,"suggestions":"183"},{"ruleId":"167","severity":1,"message":"184","line":50,"column":10,"nodeType":"169","messageId":"170","endLine":50,"endColumn":15},{"ruleId":"167","severity":1,"message":"185","line":52,"column":10,"nodeType":"169","messageId":"170","endLine":52,"endColumn":14},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],["186"],["187"],["186"],["187"],["186"],["187"],"no-unused-vars","'nextMonthNum' is assigned a value but never used.","Identifier","unusedVar","'nextMonth' is assigned a value but never used.","'nextSecondMonthNum' is assigned a value but never used.","'nextSecondMonth' is assigned a value but never used.","'startTimer' is assigned a value but never used.","'setCityInStorage' is assigned a value but never used.","'isInitialMonthSet' is assigned a value but never used.",["186"],["187"],"'date' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["188"],"'month' is assigned a value but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"189","fix":"190"},"Update the dependencies array to be: [history]",{"range":"191","text":"192"},[3040,3042],"[history]"]